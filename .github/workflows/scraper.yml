name: YAM Boat & Club Activity Monitor

on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  workflow_dispatch:  # Allow manual triggering

jobs:
  monitor_slots:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # This gives permission to push to the repository
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install

      - name: Run slot monitor once
        env:
          YAM_USERNAME: ${{ secrets.YAM_USERNAME }}
          YAM_PASSWORD: ${{ secrets.YAM_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          STORM_GLASS_KEY: ${{ secrets.STORM_GLASS_KEY }}
          YAM_COOKIES_PATH: ${{ runner.temp }}/yam_cookies.json
        run: python -m app.main monitor 14 --once

      - name: Run club monitor once
        env:
          YAM_USERNAME: ${{ secrets.YAM_USERNAME }}
          YAM_PASSWORD: ${{ secrets.YAM_PASSWORD }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_URL_CLUB: ${{ secrets.SLACK_WEBHOOK_URL_CLUB }}
          STORM_GLASS_KEY: ${{ secrets.STORM_GLASS_KEY }}
          YAM_COOKIES_PATH: ${{ runner.temp }}/yam_cookies.json
        run: python -m app.main club check 14

      - name: Commit and push if changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add app/data/all_slots.json app/data/previous_slots.json app/data/notified_slots.json app/data/club_all_slots.json app/data/club_previous_slots.json app/data/club_notified_slots.json app/data/stormglass_usage.json
          
          # Only proceed if there are changes to commit
          if ! git diff --quiet || ! git diff --staged --quiet; then
            git commit -m "Update slot data [skip ci]"
            
            # Stash any unstaged changes or untracked files before pulling
            STASH_MADE=false
            if ! git diff --quiet HEAD || [ -n "$(git ls-files --others --exclude-standard)" ]; then
              echo "Unstaged changes or untracked files detected. Stashing..."
              git stash push --keep-index --include-untracked
              STASH_MADE=true
            fi
            
            # Pull with rebase before pushing to handle concurrent updates
            echo "Pulling latest changes from origin..."
            if git pull --rebase origin ${GITHUB_REF#refs/heads/}; then
              echo "Rebase successful."
            else
              echo "Rebase failed. Aborting rebase..."
              git rebase --abort # IMPORTANT: Clean up from the failed rebase

              echo "Fetching latest from origin after rebase abort..."
              git fetch origin

              echo "Attempting merge with origin/${GITHUB_REF#refs/heads/} using 'ours' strategy for conflicts..."
              # The -Xours option will favor the current Action's changes in case of conflict.
              if git merge -Xours origin/${GITHUB_REF#refs/heads/} -m "Merge remote-tracking branch 'origin/${GITHUB_REF#refs/heads/}' (favoring local changes on conflict)"; then
                echo "Merge successful (favoring local changes on conflict)."
              else
                # This should be rare if -Xours is effective, but indicates a more severe merge problem.
                echo "Merge failed even with -Xours. This is unexpected. Error: $?"
                # Consider adding 'exit 1' here if this state is critical.
              fi
            fi
            
            # Pop the stash if one was made
            if [ "$STASH_MADE" = true ]; then
              echo "Attempting to pop stash..."
              if git stash pop; then
                echo "Stash popped successfully."
              else
                echo "Stash pop failed. This may be due to conflicts between stashed changes and the merged history."
                echo "Continuing push. Manual inspection of stash may be needed if pop conflicts are critical."
              fi
            fi
            
            # Push changes
            echo "Pushing changes to origin..."
            git push origin HEAD:${GITHUB_REF}
          fi
